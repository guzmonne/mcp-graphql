enum Gender {
  male
  female
}

type SessionLogsQuery {
  List: [SessionLog]
  Count: Int
  LastEvaluatedKeys: [ID]
}

type APKey {
  Mac: ID
}

type APsScan {
  List: [AP]
  Count: Int
  LastEvaluatedKey: ID
}

input Between {
  years: [Int!]!
  start: Float
  end: Float
}

input Pagination {
  limit: Int
  from: ID
}

type Profile {
  ID: ID!
  Provider: String!
  Name: String
  Email: String
  Gender: Gender
  Age: String
  UpdatedAt: Float
  CreatedAt: Float
  DeviceMac: String
  Document: String
  Picture: String
  SessionLogs(params: Between!): SessionLogsQuery
}

type Location {
  ID: ID!
  Name: String!
  Lat: Float!
  Lng: Float!
  Name: String!
  UpdatedAt: Float
  CreatedAt: Float
  APs(params: Pagination): APsScan
  SessionLogs(params: Between!): SessionLogsQuery
}

type AP {
  ID: ID!
  Location: Location
  LocationID: ID!
  LocationName: String!
  Mac: String!
  Name: String!
  Tags: [String]
  UpdatedAt: Float
  CreatedAt: Float
  SessionLogs(params: Between!): SessionLogsQuery
}

type SessionLog {
  ID: ID!
  Client: Profile
  ClientID: ID
  Provider: String
  ClientMac: String
  Gender: Gender
  Hour: Float
  DayOfMonth: Float
  DayOfYear: Float
  Week: Float
  Month: Float
  Year: Float
  Timestamp: Float
  Location: Location
  LocationID: ID
  LocationName: String
  Node: AP
  NodeMac: ID
  NodeName: String
  Tags: [String]
  UpdatedAt: Float
  CreatedAt: Float
}

# This schema allows the following query:
type Query {
  Profiles: [Profile]
  APs: [AP]
  Locations: [Location]
  SessionLogs(params: Between!): SessionLogsQuery
}

schema {
  query: Query
}